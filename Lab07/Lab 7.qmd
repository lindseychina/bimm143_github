---
title: "Lab 7"
author: "Lindsey China (A17023629)"
format: pdf
toc: TRUE
---

Today we will start our multi part exploration of some key machine learning methods. We will begin with clustering - finding groupings in data, and then dimensional reduction.

## Clustering

Let's start with "k-means" clustering.
The main function in base R for this `kmeans()`

```{r}
# Make some data
hist(rnorm(100000, mean=3))
```

```{r}
# Make a data set with X and Y coordinates
tmp <- c(rnorm(30, -3), rnorm(30, +3))
x <- cbind(x=tmp, y=rev(tmp))
plot(x)
```

Now let's try out `kmeans()`

```{r}
km <- kmeans(x, centers=2)
km
```

```{r}
attributes(km)
```

> Q. How many points in each cluster

```{r}
km$size
```

> Q. What component of your result object details cluster assignment/membership?

```{r}
km$cluster
```

> Q. What are the centers/mean values of each cluster?

```{r}
km$centers
```

> Q. Make a plot of your data showing your clustering results.

```{r}
# Assign different colors to each cluster
plot(x, col=km$cluster)

# Add a value to change the colors
plot(x, col=km$cluster+2)

# Highlight the center points of each cluster
# cex changes size of square, pch changes the shape of the point (15 is square, 16 is filled circle)
points(km$centers, col="red", pch=15, cex=3)

```

> Q. Run `kmeans()` again and cluster in 4 groups, plot the results.

```{r}
km_4 <- kmeans(x, centers=4)
plot(x, col=km_4$cluster)
points(km_4$centers, col="lightblue4", pch=15, cex=2)
```

## Hierarchical Clustering

This form of clustering aims to reveal the structure in your data by progressively grouping points into an ever smaller number of clusters.

The main function in base R for this is called `hclust()`. This function does not take our input data directly but wants a "distance matrix" that details how (dis)similar all our input data points are to each other.

```{r}
hc <- hclust(dist(x))
hc
```

The print out above is not very useful (unlike that from `kmeans()`) but there is a useful `plot()` method

```{r}
plot(hc)
abline(h=10, col="red")
```

To get my main result (cluster membership vector) I need to cut my tree using the function `cutree()`

```{r}
tree_cluster <- cutree(hc, h=10)
```

Plot the data, coloring it with the dendrogram cluster membership

```{r}
plot(x, col=tree_cluster)
```

## PCA Data

```{r}
url <- "https://tinyurl.com/UK-foods"
x <- read.csv(url)
```

Find dimensions of the dataset:

```{r}
dim(x)
```

Preview first six rows:

```{r}
head(x)
```
Shift column 1 to be the row names:

```{r}
rownames(x) <- x[,1]
# Remove column 1 
x <- x[,-1]
head(x)

# Alternatively
x <- read.csv(url, row.names=1)
head(x)

```

```{r}
barplot(as.matrix(x), beside=T, col=rainbow(nrow(x)))
```

Changing the beside argument to false results in the data being stacked instead of aligned next to each other.

```{r}
barplot(as.matrix(x), beside=F, col=rainbow(nrow(x)))
```

The pairs plot can be useful for small datasets:

```{r}
#rainbow(nrow(x))
pairs(x, col=rainbow(nrow(x)), pch=16)
```

Pairs plots are helpful for small datasets but it can be lots of work to interpret and gets intractable for larger datasets.

So PCA to the rescue...

The main function to do PCA in base R is called `prcomp()`. This function wants the transpose of our data in this case.

```{r}
# Transpose the data set with t(x)
pca <- prcomp(t(x))
summary(pca)
```

```{r}
attributes(pca)
```

```{r}
pca$x
```

A major CA result visualization is called a PCA plot, also known as a score plot, biplot, PC1 vs. PC2 plot, or ordination plot (naming typically depends on the field). 

```{r}
mycols <- c("orange", "red", "blue", "green")
plot(pca$x[,1], pca$x[,2], col=mycols, pch=16,
     xlab="PC1", ylab="PC2")
abline(h=0, v=0, col="gray")
```

Another important output from PCA is called the "loadings" vector or the "rotation" component - this tells us how much the original variables (the foods in this case) contribute to the new PCs.

```{r}
pca$rotation
```

PCA looks to be a super useful method for giving us some inside into high dimensional data that is difficult to examine in other ways.
